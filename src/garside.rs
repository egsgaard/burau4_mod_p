use hashbrown::HashMap;

use crate::algebra::{Matrix, Polynomial};

pub fn generate_descendants() -> HashMap<i32, Vec<i32>> {
    let mut d = HashMap::new();
    d.insert(1, vec![1, 4, 18]);
    d.insert(2, vec![2, 3, 12, 13, 16]);
    d.insert(3, vec![1, 4, 18]);
    d.insert(4, vec![2, 3, 12, 13, 16]);
    d.insert(5, vec![1, 2, 3, 4, 5, 12, 13, 16, 18, 19, 22]);
    d.insert(6, vec![6, 8, 9]);
    d.insert(7, vec![1, 4, 6, 7, 8, 9, 10, 11, 18, 20, 21]);
    d.insert(8, vec![2, 3, 12, 13, 16]);
    d.insert(9, vec![1, 4, 18]);
    d.insert(10, vec![2, 3, 12, 13, 16]);
    d.insert(11, vec![1, 2, 3, 4, 5, 12, 13, 16, 18, 19, 22]);
    d.insert(12, vec![6, 8, 9]);
    d.insert(13, vec![1, 4, 6, 7, 8, 9, 10, 11, 18, 20, 21]);
    d.insert(14, vec![2, 3, 6, 8, 9, 12, 13, 14, 15, 16, 17]);
    d.insert(15, vec![1, 4, 6, 7, 8, 9, 10, 11, 18, 20, 21]);
    d.insert(16, vec![2, 3, 12, 13, 16]);
    d.insert(17, vec![1, 2, 3, 4, 5, 12, 13, 16, 18, 19, 22]);
    d.insert(18, vec![6, 8, 9]);
    d.insert(19, vec![1, 4, 6, 7, 8, 9, 10, 11, 18, 20, 21]);
    d.insert(20, vec![2, 3, 6, 8, 9, 12, 13, 14, 15, 16, 17]);
    d.insert(21, vec![1, 4, 6, 7, 8, 9, 10, 11, 18, 20, 21]);
    d.insert(22, vec![2, 3, 6, 8, 9, 12, 13, 14, 15, 16, 17]);
    d
}

pub fn generate_matrix_map(p: i32) -> HashMap<i32, Matrix> {
    let mut d = HashMap::new();
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(0, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(0, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(2, -1)], p);
    d.insert(1, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(0, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(0, 1)], p);
    d.insert(2, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(0, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(2, -1)], p);
    d.insert(3, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(0, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(2, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(3, 1)], p);
    d.insert(4, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(0, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][0] = Polynomial::new(vec![(2, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(3, 1)], p);
    d.insert(5, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(2, -1)], p);
    mat.d[0][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(0, 1)], p);
    mat.d[2][2] = Polynomial::new(vec![(0, 1)], p);
    d.insert(6, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(2, -1)], p);
    mat.d[0][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(0, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(2, -1)], p);
    d.insert(7, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][1] = Polynomial::new(vec![(3, 1)], p);
    mat.d[0][2] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(0, 1)], p);
    d.insert(8, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][2] = Polynomial::new(vec![(4, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(2, -1)], p);
    d.insert(9, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][1] = Polynomial::new(vec![(3, 1)], p);
    mat.d[0][2] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(2, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(3, 1)], p);
    d.insert(10, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][2] = Polynomial::new(vec![(4, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][0] = Polynomial::new(vec![(2, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(3, 1)], p);
    d.insert(11, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(2, -1)], p);
    mat.d[0][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(0, 1)], p);
    d.insert(12, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(2, -1)], p);
    mat.d[0][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(2, -1)], p);
    d.insert(13, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][1] = Polynomial::new(vec![(3, 1)], p);
    mat.d[0][2] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(0, 1)], p);
    d.insert(14, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][2] = Polynomial::new(vec![(4, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][2] = Polynomial::new(vec![(2, -1)], p);
    d.insert(15, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][1] = Polynomial::new(vec![(3, 1)], p);
    mat.d[0][2] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(4, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(2, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(3, 1)], p);
    d.insert(16, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][2] = Polynomial::new(vec![(4, -1)], p);
    mat.d[1][1] = Polynomial::new(vec![(4, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(2, 1)], p);
    mat.d[2][1] = Polynomial::new(vec![(3, 1)], p);
    d.insert(17, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(2, -1)], p);
    mat.d[0][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(4, -1)], p);
    d.insert(18, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][0] = Polynomial::new(vec![(2, -1)], p);
    mat.d[0][1] = Polynomial::new(vec![(1, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][0] = Polynomial::new(vec![(4, -1)], p);
    d.insert(19, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][1] = Polynomial::new(vec![(3, 1)], p);
    mat.d[0][2] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(1, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(4, -1)], p);
    d.insert(20, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][2] = Polynomial::new(vec![(4, -1)], p);
    mat.d[1][0] = Polynomial::new(vec![(3, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][2] = Polynomial::new(vec![(3, 1)], p);
    mat.d[2][0] = Polynomial::new(vec![(4, -1)], p);
    d.insert(21, mat);
    let mut mat = Matrix::zero(p);
    mat.d[0][1] = Polynomial::new(vec![(3, 1)], p);
    mat.d[0][2] = Polynomial::new(vec![(2, 1)], p);
    mat.d[1][1] = Polynomial::new(vec![(4, -1)], p);
    mat.d[2][0] = Polynomial::new(vec![(4, -1)], p);
    d.insert(22, mat);
    d
}
